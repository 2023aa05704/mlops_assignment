name: CI/CD Pipeline

on:
  push:
    branches:
      - m1
  pull_request:
    branches:
      - m1

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.11
  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #     - name: Run flake8
  #       run: |
  #         pip install flake8
  #         flake8 src/train.py

  # test:
  #   runs-on: ubuntu-latest
  #   needs: lint  # This ensures 'test' runs after 'lint'
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.11
  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #     - name: Run tests
  #       run: |
  #         pytest tests/

  deploy:
    runs-on: ubuntu-latest
    # needs: test  # This ensures 'deploy' runs after 'test'
    steps:
      - uses: actions/checkout@v2
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Generate SSH Key Pair
        run: |
          echo "Key pair not found. Generating a new SSH key pair..."
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/mlops-ec2-key -N ""
          echo "SSH private key generated at ~/.ssh/mlops-ec2-key"
          echo "SSH public key generated at ~/.ssh/mlops-ec2-key.pub"

          # Base64 encode the private key to make it single-line
          PRIVATE_KEY=$(cat ~/.ssh/mlops-ec2-key)
          echo "PRIVATE_KEY=$PRIVATE_KEY"
          PRIVATE_KEY=$(cat ~/.ssh/mlops-ec2-key | base64)
          echo "PRIVATE_KEY=$PRIVATE_KEY"
          echo "PRIVATE_KEY=$PRIVATE_KEY" >> $GITHUB_ENV

          # Import the public key to AWS
          aws ec2 import-key-pair \
            --key-name mlops-ec2-key \
            --public-key-material fileb://~/.ssh/mlops-ec2-key.pub

      - name: Get Latest Amazon Linux 2 AMI ID
        id: get-ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" \
                     "Name=state,Values=available" \
            --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
            --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      # - name: Check if EC2 instance exists
      #   run: |
      #     # Attempt to get the existing EC2 instance ID
      #     INSTANCE_ID=$(aws ec2 describe-instances \
      #       --filters "Name=tag:Name,Values=mlops-ec2-instance" "Name=instance-state-name,Values=running" \
      #       --query "Reservations[0].Instances[0].InstanceId" \
      #       --output text || echo "None")

      #     # Output the result and set it as an environment variable
      #     echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      #     # Check if the instance was found
      #     if [ "$INSTANCE_ID" == "None" ]; then
      #       echo "No running EC2 instance found. Proceeding to create a new one..."
      #     else
      #       echo "Found existing EC2 instance with ID: $INSTANCE_ID"
      #     fi

      - name: Get or create subnet
        run: |
          # Try to get the subnet by tag name or region
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=tag:Name,Values=mlops-ec2-subnet" \
            --query "Subnets[0].SubnetId" \
            --output text || echo "None")

          # Check if subnet was found
          if [ "$SUBNET_ID" == "None" ]; then
            echo "No existing subnet found. Creating a new subnet..."

            # Create a new subnet (replace with correct VPC ID and CIDR block)
            # VPC_ID=$(aws ec2 describe-vpcs \
            #   --query "Vpcs[0].VpcId" \
            #   --output text)  # This assumes you're using the default VPC
            # echo "Found existing VPC with ID: $VPC_ID"

            # Check if VPC_ID is valid
            # if [ "$VPC_ID" == "None" ]; then
            # echo "No VPC found. Creating a default VPC..."
            VPC_ID=$(aws ec2 create-vpc \
              --cidr-block 10.0.0.0/16 \
              --query "Vpc.VpcId" \
              --output text)
            # fi

            # Create subnet in the default VPC or specified VPC
            SUBNET_ID=$(aws ec2 create-subnet \
              --vpc-id $VPC_ID \
              --cidr-block 10.0.1.0/24 \
              --availability-zone ap-south-1a \
              --query "Subnet.SubnetId" \
              --output text)

            # Tag the subnet with a name
            aws ec2 create-tags \
              --resources $SUBNET_ID \
              --tags Key=Name,Value=mlops-ec2-subnet

            echo "Created new subnet with ID: $SUBNET_ID"
          else
            echo "Found existing subnet with ID: $SUBNET_ID"
          fi

          # Set the subnet ID as an environment variable for use in future steps
          echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_ENV

      - name: Create EC2 instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.AMI_ID }} \
            --instance-type t2.micro \
            --key-name mlops-ec2-key \
            --security-group-ids ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --subnet-id ${{ env.SUBNET_ID }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=mlops-ec2-instance}]' \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "Created EC2 instance with ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Check if EC2 instance was created successfully
        run: |
          if [ "$INSTANCE_ID" == "None" ]; then
            echo "EC2 instance creation failed!"
            exit 1
          else
            echo "EC2 instance created with ID: $INSTANCE_ID"
          fi


      - name: Wait for EC2 instance to be running
        run: |
          if [ "$INSTANCE_ID" != "None" ]; then
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            echo "EC2 instance is now running."
          else
            echo "Skipping EC2 wait because instance creation failed."
          fi

      - name: Retrieve EC2 Public IP
        id: ec2-ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: SSH into EC2 and provision
        run: |
          echo "${{ env.PRIVATE_KEY }}" | base64 --decode > ~/.ssh/mlops-ec2-key
          chmod 400 ~/.ssh/mlops-ec2-key
          ssh -i ~/.ssh/mlops-ec2-key -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
          sudo yum update -y
          sudo yum install docker -y
          sudo service docker start
          sudo usermod -aG docker ec2-user
          EOF

      - name: Build and Run Docker Image on EC2
        run: |
          scp -i ~/.ssh/mlops-ec2-key -o StrictHostKeyChecking=no Dockerfile ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/
          ssh -i ~/.ssh/mlops-ec2-key -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
          cd /home/ec2-user/
          docker build -t my-mlops-app .
          docker run -d -p 5000:5000 my-mlops-app
          EOF

      - name: Cleanup EC2 instance and SSH key pair
        if: always()  # Ensures this runs even if previous steps fail
        run: |
          # Check if EC2 instance exists and terminate it
          if [ -n "${{ env.INSTANCE_ID }}" ]; then
            echo "Terminating EC2 instance with ID: ${{ env.INSTANCE_ID }}"
            aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
            aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}
            echo "EC2 instance terminated."
          else
            echo "No EC2 instance found to terminate."
          fi

          # Delete the key pair
          echo "Deleting SSH key pair mlops-ec2-key"
          aws ec2 delete-key-pair --key-name mlops-ec2-key
          echo "SSH key pair deleted."